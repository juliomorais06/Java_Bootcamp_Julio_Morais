Ordenação em List
1. Ordenação de Pessoas
Crie uma classe chamada "OrdenacaoPessoas" que possui uma lista de objetos do tipo "Pessoa" como atributo. Cada pessoa possui atributos como nome, idade e altura. Implemente os seguintes métodos:

adicionarPessoa(String nome, int idade, double altura): Adiciona uma pessoa à lista.
ordenarPorIdade(): Ordena as pessoas da lista por idade usando a interface Comparable.
ordenarPorAltura(): Ordena as pessoas da lista por altura usando um Comparator personalizado.

public class Pessoa implements Comparable<Pessoa> {
	//atributos
	private String nome;
	private int idade;
	private double altura;

	//contrutor
	public Pessoa(String nome, int idade, double altura) {
		this.nome = nome;
		this.idade = idade;
		this.altura = altura;
	}

	//compareTo colocado após o implements
	public int compareTo(Pessoa p) {
		return Integer.compare(idade, p.getIdade);
	}

	//getters
	public String getNome() {
		return nome;
	}
	public int getIdade() {
		return idade;
	}
	public double getAltura() {
		return altura;
	}

	//método para retornar toString
	public String toString() {
		return nome + idade + altura;
	}
}


class ComparatorPorAltura implements Comparator<Pessoa> {
	public int compare(Pessoa p1, Pessoa p2) {
		//upper do double é Double, upper do int é Integer
		return Double.compare(p1.getAltura(), p2.getAltura());
	}
}


---------------------------------------------------------------------------------------------
import java.util.List;

public class OrdenacaoPessoa {
	//atributo
	private List<Pessoa> pessoaList;

	public OrdenacaoPessoa() {
		this.pessoaList = new ArrayList<>();
	}
	
	//adicionar pessoa à lista
	public void adicionarPessoa(String nome, int idade, double altura) {
		pessoaList.add(new Pessoa(nome, idade, altura));
	}

	//adicionar implements Comparable na class Pessoa
	public List<Pessoa> ordenarPorIdade() {
		List<Pessoa> pessoasPorIdade = new ArrayList<>(pessoaList);
		Collections.sort(pessoasPorIdade);
		return pessoasPorIdade;
	}
	//comparação por altura (Comparator), precisa criar uma classe fora.
	public List<Pessoa> ordenarPorAltura() {
		List<Pessoa> pessoasPorAltura = new ArrayList<>(pessoaList);
		Collections.sort(pessoasPorAltura, new ComparatorPorAltura());
		return pessoasPorAltura;
	}

	public static void main(String[] args) {
		OrdenacaoPessoa ordenacaopessoa = new OrdenacaoPessoa();
		ordenacaoPessoa.adicionarPessoa("Nome 1", 20, 1.56);
		ordenacaoPessoa.adicionarPessoa("Nome 2", 30, 1.80);
		ordenacaoPessoa.adicionarPessoa("Nome 3", 25, 1.70);
		ordenacaoPessoa.adicionarPessoa("Nome 4", 17, 1.56);

		System.out.println(ordenacaoPessoa.ordenarPorIdade());
		System.out.println(ordenacaoPessoa.ordenarPorAltura());

		System.out.println(ordenacaoPessoa.pessoaList);
	}
}

-------------------------------------------------------------------------------------------
2. Ordenação de Números
Crie uma classe chamada "OrdenacaoNumeros" que possui uma lista de números inteiros como atributo. Implemente os seguintes métodos:

adicionarNumero(int numero): Adiciona um número à lista.
ordenarAscendente(): Ordena os números da lista em ordem ascendente usando a interface Comparable e a class Collections.
ordenarDescendente(): Ordena os números da lista em ordem descendente usando um Comparable e a class Collections.

-------------------------------------------------------------------------------------------

